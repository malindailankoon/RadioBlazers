options:
  parameters:
    author: BellLabz
    catch_exceptions: 'True'
    category: Custom
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: cdp project
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: cdp
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: cdp
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3248, 456.0]
    rotation: 0
    state: enabled

blocks:
- name: arity
  id: variable
  parameters:
    comment: ''
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2640, 84.0]
    rotation: 0
    state: enabled
- name: eq_gain
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,1,1,1'
    label: 'Equalizer: rate'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.001'
    stop: '0.1'
    value: '0.01'
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3008, 312.0]
    rotation: 0
    state: enabled
- name: excess_bw
  id: variable
  parameters:
    comment: Set Bandwidth
    value: '.5'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2464, 28.0]
    rotation: 0
    state: enabled
- name: freq_offset
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,1,1,1'
    label: Frequency Offset
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-0.1'
    step: '0.001'
    stop: '0.1'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3072, 152.0]
    rotation: 0
    state: enabled
- name: hdr_format
  id: variable_header_format_default
  parameters:
    access_code: '11100001010110101110100010010011'
    bps: '1'
    comment: ''
    threshold: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2664, 420.0]
    rotation: 0
    state: enabled
- name: k
  id: variable
  parameters:
    comment: ''
    value: '7'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2608, 180.0]
    rotation: 0
    state: enabled
- name: nfilts
  id: variable
  parameters:
    comment: ''
    value: '32'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2592, -4.0]
    rotation: 0
    state: enabled
- name: noise_volt
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,0,1,1'
    label: Noise Voltage
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '0.01'
    stop: '1'
    value: '0.4'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2808, 696.0]
    rotation: 0
    state: enabled
- name: phase_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,2,1,1'
    label: 'Phase: Bandwidth'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '1.0'
    value: 6.28/100.0
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3032, 488.0]
    rotation: 0
    state: enabled
- name: polys
  id: variable
  parameters:
    comment: ''
    value: '[109, 79]'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2616, 268.0]
    rotation: 0
    state: enabled
- name: qpsk
  id: variable_constellation_rect
  parameters:
    comment: ''
    const_points: '[0.707+0.707j, -0.707+0.707j, -0.707-0.707j, 0.707-0.707j]'
    imag_sect: '2'
    precision: '8'
    real_sect: '2'
    rot_sym: '4'
    soft_dec_lut: None
    sym_map: '[0, 1, 2, 3]'
    w_imag_sect: '1'
    w_real_sect: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3216, 732.0]
    rotation: 0
    state: enabled
- name: rf_gain_0
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: RF gain
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0'
    step: '1'
    stop: '60'
    value: '60'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3592, 448.0]
    rotation: 0
    state: enabled
- name: rrc_taps
  id: variable
  parameters:
    comment: ''
    value: firdes.root_raised_cosine(nfilts, nfilts, 1.0/float(sps), 0.35, 11*sps*nfilts)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2832, 4.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2712, 172.0]
    rotation: 0
    state: enabled
- name: samp_rate_blade
  id: variable
  parameters:
    comment: ''
    value: 600e3
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2320, 200.0]
    rotation: 0
    state: enabled
- name: spr
  id: variable
  parameters:
    comment: ''
    value: '750000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2704, 20.0]
    rotation: 0
    state: enabled
- name: sps
  id: variable
  parameters:
    comment: Samples Per Symbol
    value: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2824, 84.0]
    rotation: 0
    state: enabled
- name: time_offset
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@0: 0,2,1,1'
    label: Timing Offset
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.999'
    step: '0.0001'
    stop: '1.001'
    value: '1.00'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3552, 128.0]
    rotation: 0
    state: enabled
- name: timing_loop_bw
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: 'controls@1: 0,0,1,1'
    label: 'Time: BW'
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '0.0'
    step: '0.01'
    stop: '0.2'
    value: 6.28/100.0
    widget: slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3240, 16.0]
    rotation: 0
    state: enabled
- name: txbw
  id: variable
  parameters:
    comment: ''
    value: '9000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2512, 204.0]
    rotation: 0
    state: enabled
- name: variable_adaptive_algorithm_0
  id: variable_adaptive_algorithm
  parameters:
    comment: ''
    cons: qpsk
    delta: '10.0'
    ffactor: '0.99'
    modulus: '4'
    step_size: '.0001'
    type: cma
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2184, 4.0]
    rotation: 0
    state: enabled
- name: variable_qtgui_entry_0
  id: variable_qtgui_entry
  parameters:
    comment: ''
    entry_signal: editingFinished
    gui_hint: ''
    label: ''
    type: string
    value: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 44.0]
    rotation: 0
    state: enabled
- name: MTU
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: MTU
    short_id: ''
    type: intx
    value: '1500'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2912, 180.0]
    rotation: 0
    state: enabled
- name: blocks_char_to_float_0
  id: blocks_char_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: '1'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1808, 1016.0]
    rotation: 180
    state: enabled
- name: blocks_multiply_const_vxx_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.8'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792.0, 408]
    rotation: 90
    state: disabled
- name: blocks_multiply_const_vxx_0_0
  id: blocks_multiply_const_vxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    const: '0.8'
    maxoutbuf: '0'
    minoutbuf: '0'
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648.0, 1400]
    rotation: 90
    state: disabled
- name: blocks_repack_bits_bb_1
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [632, 868.0]
    rotation: 180
    state: enabled
- name: blocks_repack_bits_bb_1_0
  id: blocks_repack_bits_bb
  parameters:
    affinity: ''
    alias: ''
    align_output: 'False'
    comment: ''
    endianness: gr.GR_MSB_FIRST
    k: '1'
    l: '8'
    len_tag_key: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 1844.0]
    rotation: 180
    state: enabled
- name: blocks_tagged_stream_mux_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1416, 192.0]
    rotation: 0
    state: enabled
- name: blocks_tagged_stream_mux_0_0
  id: blocks_tagged_stream_mux
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    lengthtagname: '"packet_len"'
    maxoutbuf: '0'
    minoutbuf: '0'
    ninputs: '2'
    tag_preserve_head_pos: '0'
    type: byte
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 1192.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [880, 540.0]
    rotation: 0
    state: enabled
- name: blocks_throttle2_0_0
  id: blocks_throttle2
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    ignoretag: 'True'
    limit: auto
    maximum: '0.1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_second: samp_rate
    type: complex
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [744, 1508.0]
    rotation: 0
    state: enabled
- name: blocks_unpack_k_bits_bb_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: unpack 2 bits per symbol into bits
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1240, 856.0]
    rotation: 180
    state: enabled
- name: blocks_unpack_k_bits_bb_0_0
  id: blocks_unpack_k_bits_bb
  parameters:
    affinity: ''
    alias: ''
    comment: unpack 2 bits per symbol into bits
    k: '2'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1112, 1832.0]
    rotation: 180
    state: enabled
- name: channels_channel_model_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: Simulated channel
    epsilon: time_offset
    freq_offset: freq_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: noise_volt
    seed: '0'
    taps: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1144, 496.0]
    rotation: 0
    state: enabled
- name: channels_channel_model_0_0
  id: channels_channel_model
  parameters:
    affinity: ''
    alias: ''
    block_tags: 'False'
    comment: Simulated channel
    epsilon: time_offset
    freq_offset: freq_offset
    maxoutbuf: '0'
    minoutbuf: '0'
    noise_voltage: noise_volt
    seed: '0'
    taps: '3'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1064, 1472.0]
    rotation: 0
    state: enabled
- name: controls
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 0,0,1,2
    label0: Channel
    label1: Receiver
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3504, 816.0]
    rotation: 0
    state: enabled
- name: digital_constellation_decoder_cb_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: "Decode a constellation's points from \na complex space to index of constellation\
      \ \nsymbol based on the map of the  object."
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2248, 860.0]
    rotation: 180
    state: enabled
- name: digital_constellation_decoder_cb_0_0
  id: digital_constellation_decoder_cb
  parameters:
    affinity: ''
    alias: ''
    comment: "Decode a constellation's points from \na complex space to index of constellation\
      \ \nsymbol based on the map of the  object."
    constellation: qpsk
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1816, 1840.0]
    rotation: 180
    state: enabled
- name: digital_constellation_modulator_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: Modulation block
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 516.0]
    rotation: 0
    state: enabled
- name: digital_constellation_modulator_0_0
  id: digital_constellation_modulator
  parameters:
    affinity: ''
    alias: ''
    comment: Modulation block
    constellation: qpsk
    differential: 'True'
    excess_bw: excess_bw
    log: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    samples_per_symbol: sps
    truncate: 'False'
    verbose: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [376, 1540.0]
    rotation: 0
    state: enabled
- name: digital_correlate_access_code_xx_ts_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: '11100001010110101110100010010011'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '2'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [872, 852.0]
    rotation: 180
    state: enabled
- name: digital_correlate_access_code_xx_ts_0_0
  id: digital_correlate_access_code_xx_ts
  parameters:
    access_code: '11100001010110101110100010010011'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tagname: '"packet_len"'
    threshold: '1'
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [728, 1820.0]
    rotation: 180
    state: enabled
- name: digital_costas_loop_cc_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: Phase and Fine Frequency Correction
    maxoutbuf: '0'
    minoutbuf: '0'
    order: arity
    use_snr: 'False'
    w: phase_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2112, 620.0]
    rotation: 0
    state: enabled
- name: digital_costas_loop_cc_0_0
  id: digital_costas_loop_cc
  parameters:
    affinity: ''
    alias: ''
    comment: Phase and Fine Frequency Correction
    maxoutbuf: '0'
    minoutbuf: '0'
    order: arity
    use_snr: 'False'
    w: phase_bw
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1800, 1592.0]
    rotation: 0
    state: enabled
- name: digital_crc_append_0
  id: digital_crc_append
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    final_xor: '0xFFFFFFFF'
    initial_value: '0xFFFFFFFF'
    input_reflected: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    num_bits: '32'
    poly: '0x4C11DB7'
    result_reflected: 'True'
    skip_header_bytes: '0'
    swap_endianness: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [424, 24.0]
    rotation: 0
    state: enabled
- name: digital_diff_decoder_bb_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    coding: digital.DIFF_DIFFERENTIAL
    comment: "translate the differential coded symbols\n back to their original symbols"
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 828.0]
    rotation: 180
    state: enabled
- name: digital_diff_decoder_bb_0_0
  id: digital_diff_decoder_bb
  parameters:
    affinity: ''
    alias: ''
    coding: digital.DIFF_DIFFERENTIAL
    comment: "translate the differential coded symbols\n back to their original symbols"
    maxoutbuf: '0'
    minoutbuf: '0'
    modulus: '4'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1560, 1828.0]
    rotation: 180
    state: enabled
- name: digital_linear_equalizer_0_0
  id: digital_linear_equalizer
  parameters:
    adapt_after_training: 'True'
    affinity: ''
    alg: variable_adaptive_algorithm_0
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '32'
    sps: '4'
    training_sequence: '[ ]'
    training_start_tag: corr_est
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1880, 388.0]
    rotation: 0
    state: enabled
- name: digital_linear_equalizer_0_0_0
  id: digital_linear_equalizer
  parameters:
    adapt_after_training: 'True'
    affinity: ''
    alg: variable_adaptive_algorithm_0
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    num_taps: '15'
    sps: '4'
    training_sequence: '[ ]'
    training_start_tag: corr_est
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1704, 1392.0]
    rotation: 0
    state: enabled
- name: digital_map_bb_0
  id: digital_map_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "convert the symbols \nfrom the differential decoder to the \noriginal\
      \ symbols we transmitted."
    map: '[0,1,2,3]'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1472, 848.0]
    rotation: 180
    state: enabled
- name: digital_map_bb_0_0
  id: digital_map_bb
  parameters:
    affinity: ''
    alias: ''
    comment: "convert the symbols \nfrom the differential decoder to the \noriginal\
      \ symbols we transmitted."
    map: '[0,1,2,3]'
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1336, 1824.0]
    rotation: 180
    state: enabled
- name: digital_protocol_formatter_async_0
  id: digital_protocol_formatter_async
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 196.0]
    rotation: 0
    state: enabled
- name: digital_protocol_formatter_async_0_0
  id: digital_protocol_formatter_async
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    format: hdr_format
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [904, 1000.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: phase_bw
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '4'
    pfb_mf_taps: rrc_taps
    resamp_type: digital.IR_PFB_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1504, 500.0]
    rotation: 0
    state: enabled
- name: digital_symbol_sync_xx_0_0
  id: digital_symbol_sync_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    constellation: digital.constellation_bpsk().base()
    damping: '1.0'
    loop_bw: phase_bw
    max_dev: '1.5'
    maxoutbuf: '0'
    minoutbuf: '0'
    nfilters: '32'
    osps: '4'
    pfb_mf_taps: rrc_taps
    resamp_type: digital.IR_PFB_MF
    sps: sps
    ted_gain: '1.0'
    ted_type: digital.TED_SIGNAL_TIMES_SLOPE_ML
    type: cc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1352, 1456.0]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_add(gr.basic_block):\n    \"\"\"\n\
      \    Block to prepend an address byte to a PDU payload\n    \"\"\"\n    def\
      \ __init__(self, address=0x01):\n        gr.basic_block.__init__(\n        \
      \    self,\n            name=\"address_add\",\n            in_sig=[],\n    \
      \        out_sig=[]\n        )\n        self.address = address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  # prepend address\n            data.insert(0, self.address)\n           \
      \ out_msg = pmt.cons(meta, pmt.init_u8vector(len(data), data))\n           \
      \ self.message_port_pub(pmt.intern(\"out\"), out_msg)\n"
    address: '20'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('address_add', 'address_add', [('address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to prepend an address byte to a PDU
      payload\n    ', ['address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [736, 32.0]
    rotation: 0
    state: enabled
- name: epy_block_0_1_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom gnuradio\
      \ import gr\nfrom PyQt5 import QtWidgets, QtCore, QtGui\nimport sys\nimport\
      \ pmt\nimport time\nfrom datetime import datetime  # for timestamps\n\nclass\
      \ WallpaperScrollArea(QtWidgets.QScrollArea):\n    def __init__(self, bg_image=\"\
      \", parent=None):\n        super().__init__(parent)\n        self.setWidgetResizable(True)\n\
      \        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n \
      \       self.bg_pixmap = QtGui.QPixmap(bg_image) if bg_image else None\n\n \
      \   def paintEvent(self, event):\n        if self.bg_pixmap:\n            painter\
      \ = QtGui.QPainter(self.viewport())\n            painter.drawPixmap(self.viewport().rect(),\
      \ self.bg_pixmap)\n        super().paintEvent(event)\n\n\nclass messenger_gui(gr.basic_block):\n\
      \    \"\"\"\n    WhatsApp-style Messenger GUI with dynamic bubble resizing,\n\
      \    horizontal scroll for long messages, timestamp update on delivery,\n  \
      \  and failure indication if retry limit is exceeded.\n    \"\"\"\n\n    def\
      \ __init__(self, bg_image=\"\"):\n        gr.basic_block.__init__(\n       \
      \     self,\n            name=\"Messenger GUI\",\n            in_sig=None,\n\
      \            out_sig=None,\n        )\n\n        # Message ports\n        self.message_port_register_out(pmt.intern(\"\
      out\"))\n        self.message_port_register_in(pmt.intern(\"feedback\"))\n \
      \       self.set_msg_handler(pmt.intern(\"feedback\"), self._process_feedback)\n\
      \n        # Qt Application\n        self.app = QtWidgets.QApplication.instance()\n\
      \        if self.app is None:\n            self.app = QtWidgets.QApplication(sys.argv)\n\
      \n        self.qt_widget = QtWidgets.QWidget()\n        self.qt_widget.setWindowTitle(\"\
      Messenger GUI\")\n        self.qt_widget.resize(600, 500)\n\n        main_layout\
      \ = QtWidgets.QVBoxLayout()\n        main_layout.setContentsMargins(0, 0, 0,\
      \ 0)\n        main_layout.setSpacing(0)\n        self.qt_widget.setLayout(main_layout)\n\
      \n        # Scroll area with background\n        self.scroll_area = WallpaperScrollArea(bg_image=bg_image)\n\
      \        self.scroll_area.setStyleSheet(\"border: none;\")\n        self.scroll_area.setWidgetResizable(True)\n\
      \        main_layout.addWidget(self.scroll_area, stretch=1)\n\n        # Chat\
      \ container\n        self.chat_container = QtWidgets.QWidget()\n        self.chat_layout\
      \ = QtWidgets.QVBoxLayout()\n        self.chat_layout.setAlignment(QtCore.Qt.AlignTop)\n\
      \        self.chat_layout.setSpacing(10)\n        self.chat_container.setLayout(self.chat_layout)\n\
      \        self.chat_container.setStyleSheet(\"background: transparent;\")\n \
      \       self.scroll_area.setWidget(self.chat_container)\n\n        # Input area\n\
      \        input_layout = QtWidgets.QHBoxLayout()\n        self.input_box = QtWidgets.QLineEdit()\n\
      \        self.input_box.setPlaceholderText(\"Type a message...\")\n        self.input_box.setStyleSheet(\"\
      \"\"\n            QLineEdit {\n                border-radius: 15px;\n      \
      \          padding: 12px;\n                background-color: rgba(255,255,255,230);\n\
      \                font-size: 32px;\n            }\n        \"\"\")\n        self.send_button\
      \ = QtWidgets.QPushButton(\"Send\")\n        self.send_button.setStyleSheet(\"\
      \"\"\n            QPushButton {\n                background-color: #4CAF50;\n\
      \                color: white;\n                border-radius: 15px;\n     \
      \           padding: 12px 24px;\n                font-weight: bold;\n      \
      \          font-size: 32px;\n            }\n            QPushButton:hover {\n\
      \                background-color: #45a049;\n            }\n        \"\"\")\n\
      \        input_layout.addWidget(self.input_box)\n        input_layout.addWidget(self.send_button)\n\
      \        main_layout.addLayout(input_layout)\n\n        # Connect signals\n\
      \        self.send_button.clicked.connect(self.send_message)\n        self.input_box.returnPressed.connect(self.send_message)\n\
      \n        self._last_message_timestamp = None\n        self.qt_widget.show()\n\
      \n    def send_message(self):\n        text = self.input_box.text().strip()\n\
      \        if not text:\n            return\n\n        # Send message via GNU\
      \ Radio port\n        self.message_port_pub(pmt.intern(\"out\"), pmt.string_to_symbol(text))\n\
      \n        # Scrollable bubble container\n        scroll = QtWidgets.QScrollArea()\n\
      \        scroll.setWidgetResizable(True)\n        scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)\n\
      \        scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n \
      \       scroll.setStyleSheet(\"border: none; background: transparent;\")\n\n\
      \        # Message bubble\n        bubble = QtWidgets.QLabel(text)\n       \
      \ bubble.setWordWrap(False)  # Disable wrapping\n        bubble.setStyleSheet(\"\
      \"\"\n            QLabel {\n                background-color: qlineargradient(x1:0,\
      \ y1:0, x2:1, y2:1,\n                    stop:0 #4CAF50, stop:1 #66BB6A);\n\
      \                color: white;\n                border-radius: 15px;\n     \
      \           padding: 10px 15px;\n                font-size: 32px;\n        \
      \    }\n        \"\"\")\n\n        # Shadow effect\n        effect = QtWidgets.QGraphicsDropShadowEffect()\n\
      \        effect.setBlurRadius(6)\n        effect.setXOffset(2)\n        effect.setYOffset(2)\n\
      \        effect.setColor(QtGui.QColor(0, 0, 0, 100))\n        bubble.setGraphicsEffect(effect)\n\
      \n        scroll.setWidget(bubble)\n        scroll.setMinimumWidth(200)\n  \
      \      scroll.setMaximumWidth(550)  # Max visible width of bubble\n        bubble.adjustSize()\n\
      \        scroll.adjustSize()\n\n        # Timestamp label as small blue pill\
      \ initially\n        timestamp = QtWidgets.QLabel(\"Sending...\")\n        timestamp.setStyleSheet(\"\
      \"\"\n            QLabel {\n                background-color: #2196F3;  /* blue\
      \ background */\n                color: white;\n                font-size: 18px;\n\
      \                border-radius: 8px;\n                padding: 2px 6px;\n  \
      \          }\n        \"\"\")\n        timestamp.setAlignment(QtCore.Qt.AlignRight)\n\
      \        timestamp.setSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)\n\
      \n        # Container for bubble + timestamp\n        container = QtWidgets.QWidget()\n\
      \        vbox = QtWidgets.QVBoxLayout()\n        vbox.setContentsMargins(0,\
      \ 0, 0, 0)\n        vbox.setSpacing(2)\n        vbox.addWidget(scroll)\n   \
      \     vbox.addWidget(timestamp, alignment=QtCore.Qt.AlignRight)\n        container.setLayout(vbox)\n\
      \        container.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)\n\
      \n        # Add to chat layout\n        self.chat_layout.addWidget(container,\
      \ alignment=QtCore.Qt.AlignRight)\n\n        # Force proper size recalculation\n\
      \        bubble.adjustSize()\n        scroll.adjustSize()\n        container.adjustSize()\n\
      \        self.chat_container.adjustSize()\n        QtWidgets.QApplication.processEvents()\
      \  # Force layout update\n\n        # Scroll to bottom\n        QtCore.QTimer.singleShot(50,\
      \ lambda: self.scroll_area.verticalScrollBar().setValue(\n            self.scroll_area.verticalScrollBar().maximum()\n\
      \        ))\n\n        self.input_box.clear()\n        self._last_message_timestamp\
      \ = timestamp\n\n    def _process_feedback(self, msg):\n        try:\n     \
      \       if pmt.is_symbol(msg):\n                feedback = pmt.symbol_to_string(msg)\n\
      \n                if feedback == \"END_ACK_RECEIVED\" and self._last_message_timestamp:\n\
      \                    # Successful delivery: show current time in blue pill\n\
      \                    self._last_message_timestamp.setText(datetime.now().strftime(\"\
      %H:%M\"))\n                    self._last_message_timestamp.setStyleSheet(\"\
      \"\"\n                        QLabel {\n                            background-color:\
      \ #2196F3;  /* blue background */\n                            color: white;\n\
      \                            font-size: 18px;\n                            border-radius:\
      \ 8px;\n                            padding: 2px 6px;\n                    \
      \    }\n                    \"\"\")\n\n                elif feedback == \"RETRY_LIMIT_EXCEEDED\"\
      \ and self._last_message_timestamp:\n                    # Failed delivery:\
      \ red pill\n                    self._last_message_timestamp.setText(\"Failed\"\
      )\n                    self._last_message_timestamp.setStyleSheet(\"\"\"\n \
      \                       QLabel {\n                            background-color:\
      \ #F44336;  /* red background */\n                            color: white;\n\
      \                            font-size: 18px;\n                            border-radius:\
      \ 8px;\n                            padding: 2px 6px;\n                    \
      \    }\n                    \"\"\")\n\n        except Exception as e:\n    \
      \        print(f\"[messenger_gui] Error processing feedback: {e}\")\n\n"
    affinity: ''
    alias: ''
    bg_image: '''/home/vboxuser/Downloads/tx.jpg'''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Messenger GUI', 'messenger_gui', [('bg_image', "''")], [('feedback',
      'message', 1)], [('out', 'message', 1)], '\n    WhatsApp-style Messenger GUI
      with dynamic bubble resizing,\n    horizontal scroll for long messages, timestamp
      update on delivery,\n    and failure indication if retry limit is exceeded.\n    ',
      [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [216, 164.0]
    rotation: 180
    state: enabled
- name: epy_block_2_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport threading\n\
      import pmt\nfrom gnuradio import gr\nimport time\n\nclass pdu_text_gui(gr.basic_block):\n\
      \    \"\"\"\n    Custom block: QT GUI Message Entry -> PDU sender with Go-Back-N\
      \ ARQ.\n    - Splits text into packets (2 bytes: [address, seq_id] + payload)\n\
      \    - Sends packets in a sliding window\n    - Waits for ACKs [0xAA, seq_id]\n\
      \    - On timeout, retransmits all unACKed packets in window\n    - After full\
      \ message, sends END packet [address, seq_id] (no payload)\n    - Sends feedback\
      \ to GUI when END ACK is received\n    - Sends feedback if retry limit is exceeded\n\
      \    \"\"\"\n\n    def __init__(self, wait_time=2.0, pkt_size=32, address=0x01,\
      \ retry_limit=100, window_size=4):\n        gr.basic_block.__init__(\n     \
      \       self,\n            name=\"GUI Text to PDU with Go-Back-N ARQ\",\n  \
      \          in_sig=[],\n            out_sig=[]\n        )\n\n        # Parameters\n\
      \        self._timeout = float(wait_time)\n        self._pkt_size = int(pkt_size)\n\
      \        self._address = int(address) & 0xFF\n        self._retry_limit = int(retry_limit)\n\
      \        self._window_size = int(window_size)\n\n        # Sequence ID\n   \
      \     self._seq_id = 1  # 0x01..0xFF, avoid 0x00\n\n        # Message ports\n\
      \        self.message_port_register_out(pmt.intern(\"out\"))\n        self.message_port_register_out(pmt.intern(\"\
      feedback\"))  # feedback port for GUI\n\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_in(pmt.intern(\"ack_in\"))\n\n  \
      \      self.set_msg_handler(pmt.intern(\"in\"), self._process_text)\n      \
      \  self.set_msg_handler(pmt.intern(\"ack_in\"), self._process_ack)\n\n     \
      \   # Thread + synchronization\n        self._thread = None\n        self._stop_event\
      \ = threading.Event()\n        self._lock = threading.Lock()\n\n        # Buffers\n\
      \        self._text_data = b\"\"\n        self._packets = []\n        self._base\
      \ = 0          # first unACKed packet index\n        self._next_to_send = 0\
      \  # next packet index to send\n        self._attempts = 0\n        self._end_seq_id\
      \ = 0     # store END packet seq_id for feedback\n\n    # ---------------------------\n\
      \    # Message handler from GUI\n    # ---------------------------\n    def\
      \ _process_text(self, msg):\n        try:\n            if pmt.is_symbol(msg):\n\
      \                text_str = pmt.symbol_to_string(msg)\n            elif pmt.is_string(msg):\n\
      \                text_str = pmt.string_to_string(msg)\n            else:\n \
      \               print(\"[pdu_text_gui] Invalid PMT message type\")\n       \
      \         return\n\n            self._text_data = text_str.encode(\"utf-8\"\
      )\n\n            # Start sending in a separate thread\n            if self._thread\
      \ is None or not self._thread.is_alive():\n                self._stop_event.clear()\n\
      \                self._thread = threading.Thread(target=self._run)\n       \
      \         self._thread.daemon = True\n                self._thread.start()\n\
      \n        except Exception as e:\n            print(f\"[pdu_text_gui] Error\
      \ processing text: {e}\")\n\n    # ---------------------------\n    # Sending\
      \ loop (Go-Back-N)\n    # ---------------------------\n    def _run(self):\n\
      \        raw = self._text_data\n        step = self._pkt_size - 2\n        blocks\
      \ = [raw[i:i+step] for i in range(0, len(raw), step)]\n\n        # Build packets\
      \ with headers\n        self._packets = []\n        for block in blocks:\n \
      \           packet = bytes([self._address, self._seq_id]) + block\n        \
      \    self._packets.append((self._seq_id, packet))\n            self._seq_id\
      \ = (self._seq_id + 1) & 0xFF\n            if self._seq_id == 0:\n         \
      \       self._seq_id = 1\n\n        # Add END packet (address + seq_id, no payload)\n\
      \        end_packet = bytes([self._address, self._seq_id])\n        self._packets.append((self._seq_id,\
      \ end_packet))\n        self._end_seq_id = self._seq_id  # store END packet\
      \ seq_id for feedback\n        print(f\"[pdu_text_gui] End packet prepared (id=0x{self._seq_id:02X})\"\
      )\n        self._seq_id = (self._seq_id + 1) & 0xFF\n        if self._seq_id\
      \ == 0:\n            self._seq_id = 1\n\n        self._base = 0\n        self._next_to_send\
      \ = 0\n        self._attempts = 0\n\n        while self._base < len(self._packets)\
      \ and not self._stop_event.is_set():\n            with self._lock:\n       \
      \         # Send up to window_size packets\n                while self._next_to_send\
      \ < self._base + self._window_size and self._next_to_send < len(self._packets):\n\
      \                    seq_id, packet = self._packets[self._next_to_send]\n  \
      \                  vec = pmt.init_u8vector(len(packet), list(packet))\n    \
      \                pdu = pmt.cons(pmt.PMT_NIL, vec)\n                    self.message_port_pub(pmt.intern(\"\
      out\"), pdu)\n                    if len(packet) > 2:\n                    \
      \    print(f\"[pdu_text_gui] Packet id=0x{seq_id:02X} sent\")\n            \
      \        else:\n                        print(f\"[pdu_text_gui] END packet id=0x{seq_id:02X}\
      \ sent\")\n                    self._next_to_send += 1\n\n            # Wait\
      \ for ACK\n            time.sleep(self._timeout)\n\n            with self._lock:\n\
      \                if self._base < self._next_to_send:  # still unACKed packets\n\
      \                    self._attempts += 1\n                    if self._attempts\
      \ >= self._retry_limit:\n                        print(\"[pdu_text_gui] Failed:\
      \ retry limit exceeded\")\n                        # Send feedback to GUI about\
      \ retry limit exceeded\n                        self.message_port_pub(pmt.intern(\"\
      feedback\"), pmt.intern(\"RETRY_LIMIT_EXCEEDED\"))\n                       \
      \ self._stop_event.set()\n                        break\n                  \
      \  print(\"[pdu_text_gui] Timeout: retransmitting window\")\n              \
      \      # retransmit all unACKed packets\n                    for i in range(self._base,\
      \ self._next_to_send):\n                        seq_id, packet = self._packets[i]\n\
      \                        vec = pmt.init_u8vector(len(packet), list(packet))\n\
      \                        pdu = pmt.cons(pmt.PMT_NIL, vec)\n                \
      \        self.message_port_pub(pmt.intern(\"out\"), pdu)\n                 \
      \       if len(packet) > 2:\n                            print(f\"[pdu_text_gui]\
      \ Retransmit id=0x{seq_id:02X}\")\n                        else:\n         \
      \                   print(f\"[pdu_text_gui] Retransmit END id=0x{seq_id:02X}\"\
      )\n\n    # ---------------------------\n    # ACK handler\n    # ---------------------------\n\
      \    def _process_ack(self, msg):\n        try:\n            payload = pmt.cdr(msg)\n\
      \            if not pmt.is_u8vector(payload):\n                return\n\n  \
      \          arr = bytearray(pmt.u8vector_elements(payload))\n            if len(arr)\
      \ < 2 or arr[0] != 0xAA:\n                return\n\n            ack_id = arr[1]\n\
      \            with self._lock:\n                # slide window if ACK is valid\n\
      \                for i in range(self._base, self._next_to_send):\n         \
      \           seq_id, _ = self._packets[i]\n                    if seq_id == ack_id:\n\
      \                        if len(self._packets[i][1]) > 2:\n                \
      \            print(f\"[pdu_text_gui] ACK received for id=0x{ack_id:02X}\")\n\
      \                        else:\n                            print(f\"[pdu_text_gui]\
      \ ACK received for END id=0x{ack_id:02X}\")\n                            # Send\
      \ feedback to GUI for final ACK\n                            self.message_port_pub(pmt.intern(\"\
      feedback\"), pmt.intern(\"END_ACK_RECEIVED\"))\n                        self._base\
      \ = i + 1\n                        self._attempts = 0  # reset retries\n   \
      \                     break\n\n        except Exception as e:\n            print(f\"\
      [pdu_text_gui] Error processing ACK: {e}\")\n\n"
    address: '21'
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    pkt_size: '32'
    retry_limit: '16'
    wait_time: '0.2'
    window_size: '7'
  states:
    _io_cache: '(''GUI Text to PDU with Go-Back-N ARQ'', ''pdu_text_gui'', [(''wait_time'',
      ''2.0''), (''pkt_size'', ''32''), (''address'', ''1''), (''retry_limit'', ''100''),
      (''window_size'', ''4'')], [(''ack_in'', ''message'', 1), (''in'', ''message'',
      1)], [(''feedback'', ''message'', 1), (''out'', ''message'', 1)], ''\n    Custom
      block: QT GUI Message Entry -> PDU sender with Go-Back-N ARQ.\n    - Splits
      text into packets (2 bytes: [address, seq_id] + payload)\n    - Sends packets
      in a sliding window\n    - Waits for ACKs [0xAA, seq_id]\n    - On timeout,
      retransmits all unACKed packets in window\n    - After full message, sends END
      packet [address, seq_id] (no payload)\n    - Sends feedback to GUI when END
      ACK is received\n    - Sends feedback if retry limit is exceeded\n    '', [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [232, 248.0]
    rotation: 0
    state: enabled
- name: epy_block_3
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_check(gr.basic_block):\n    \"\"\"\n\
      \    Block to check address and strip it if matches\n    \"\"\"\n    def __init__(self,\
      \ my_address=0x01):\n        gr.basic_block.__init__(\n            self,\n \
      \           name=\"address_check\",\n            in_sig=[],\n            out_sig=[]\n\
      \        )\n        self.my_address = my_address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  if data[0] == self.my_address:\n                # strip address\n       \
      \         payload = data[1:]\n                out_msg = pmt.cons(meta, pmt.init_u8vector(len(payload),\
      \ payload))\n                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n\
      \            # else drop silently\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    my_address: '20'
  states:
    _io_cache: ('address_check', 'address_check', [('my_address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to check address and strip it if
      matches\n    ', ['my_address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 1120.0]
    rotation: 0
    state: enabled
- name: epy_block_3_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      from gnuradio import gr\n\nclass address_check(gr.basic_block):\n    \"\"\"\n\
      \    Block to check address and strip it if matches\n    \"\"\"\n    def __init__(self,\
      \ my_address=0x01):\n        gr.basic_block.__init__(\n            self,\n \
      \           name=\"address_check\",\n            in_sig=[],\n            out_sig=[]\n\
      \        )\n        self.my_address = my_address\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n    def handle_msg(self,\
      \ msg):\n        if pmt.is_pair(msg):\n            meta = pmt.car(msg)\n   \
      \         data = bytearray(pmt.u8vector_elements(pmt.cdr(msg)))\n          \
      \  if data[0] == self.my_address:\n                # strip address\n       \
      \         payload = data[1:]\n                out_msg = pmt.cons(meta, pmt.init_u8vector(len(payload),\
      \ payload))\n                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n\
      \            # else drop silently\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    my_address: '21'
  states:
    _io_cache: ('address_check', 'address_check', [('my_address', '1')], [('in', 'message',
      1)], [('out', 'message', 1)], '\n    Block to check address and strip it if
      matches\n    ', ['my_address'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [128, 432.0]
    rotation: 180
    state: enabled
- name: epy_block_3_1
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nfrom gnuradio\
      \ import gr\nfrom PyQt5 import QtWidgets, QtCore, QtGui\nimport sys\nimport\
      \ pmt\nfrom datetime import datetime  # For timestamps\n\nclass WallpaperScrollArea(QtWidgets.QScrollArea):\n\
      \    def __init__(self, bg_image=\"\", parent=None):\n        super().__init__(parent)\n\
      \        self.setWidgetResizable(True)\n        self.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)\n\
      \        self.bg_pixmap = QtGui.QPixmap(bg_image) if bg_image else None\n\n\
      \    def paintEvent(self, event):\n        if self.bg_pixmap:\n            painter\
      \ = QtGui.QPainter(self.viewport())\n            painter.drawPixmap(self.viewport().rect(),\
      \ self.bg_pixmap)\n        super().paintEvent(event)\n\nclass multi_sender_gui(gr.basic_block):\n\
      \    \"\"\"\n    Multi-sender PDU GUI with dark bluish-grey left panel\n   \
      \ and Messenger-style scalable chat bubbles with timestamps.\n    \"\"\"\n\n\
      \    def __init__(self, bg_image=\"\"):\n        gr.basic_block.__init__(self,\n\
      \            name=\"Multi-Sender PDU Viewer\",\n            in_sig=None,\n \
      \           out_sig=None\n        )\n\n        self.bg_image = bg_image\n  \
      \      self.msg_queue = []\n        self.sender_msgs = {}\n        self.sender_buttons\
      \ = {}\n        self.current_sender = None\n        self.unread = set()\n\n\
      \        # PDU input\n        self.message_port_register_in(pmt.intern(\"in\"\
      ))\n        self.set_msg_handler(pmt.intern(\"in\"), self.handle_pdu)\n\n  \
      \      # Ensure QApplication exists\n        self.app = QtWidgets.QApplication.instance()\n\
      \        if self.app is None:\n            self.app = QtWidgets.QApplication(sys.argv)\n\
      \n        # Initialize GUI\n        self.init_gui()\n\n    def init_gui(self):\n\
      \        self.qt_widget = QtWidgets.QWidget()\n        self.qt_widget.setWindowTitle(\"\
      Multi-Sender PDU Viewer\")\n        self.qt_widget.resize(800, 500)\n\n    \
      \    main_layout = QtWidgets.QHBoxLayout()\n        main_layout.setContentsMargins(0,0,0,0)\n\
      \        main_layout.setSpacing(0)\n        self.qt_widget.setLayout(main_layout)\n\
      \n        # Left: sender panel\n        self.sender_layout_widget = QtWidgets.QWidget()\n\
      \        self.sender_layout_widget.setStyleSheet(\"background-color: #1B263B;\"\
      )\n        self.sender_layout = QtWidgets.QVBoxLayout()\n        self.sender_layout.setAlignment(QtCore.Qt.AlignTop)\n\
      \        self.sender_layout_widget.setLayout(self.sender_layout)\n        main_layout.addWidget(self.sender_layout_widget)\n\
      \        self.sender_layout_widget.setFixedWidth(150)\n\n        # Right: chat\
      \ with wallpaper\n        self.scroll_area = WallpaperScrollArea(bg_image=self.bg_image)\n\
      \        self.scroll_area.setWidgetResizable(True)\n        self.chat_container\
      \ = QtWidgets.QWidget()\n        self.chat_layout = QtWidgets.QVBoxLayout()\n\
      \        self.chat_layout.setAlignment(QtCore.Qt.AlignTop)\n        self.chat_container.setLayout(self.chat_layout)\n\
      \        self.chat_container.setStyleSheet(\"background: transparent;\")\n \
      \       self.scroll_area.setWidget(self.chat_container)\n        main_layout.addWidget(self.scroll_area,\
      \ stretch=1)\n\n        # Show widget\n        self.qt_widget.show()\n\n   \
      \     # Timer to process incoming messages\n        self.timer = QtCore.QTimer()\n\
      \        self.timer.timeout.connect(self.process_queue)\n        self.timer.start(50)\n\
      \n    def handle_pdu(self, msg):\n        self.msg_queue.append(msg)\n\n   \
      \ def process_queue(self):\n        while self.msg_queue:\n            msg =\
      \ self.msg_queue.pop(0)\n            self.store_message(msg)\n\n    def store_message(self,\
      \ msg):\n        if not pmt.is_pair(msg):\n            return\n        vec =\
      \ pmt.cdr(msg)\n        if not pmt.is_u8vector(vec):\n            return\n\n\
      \        data = bytearray(pmt.u8vector_elements(vec))\n        if len(data)\
      \ < 1:\n            return\n\n        sender_bytes = data[0:1]\n        sender\
      \ = f\"Node {sender_bytes[0]:02X}\"\n        payload = data[1:]\n\n        try:\n\
      \            text = payload.decode(\"utf-8\", errors=\"ignore\")\n        except\
      \ Exception:\n            text = \"<decode error>\"\n\n        if sender not\
      \ in self.sender_msgs:\n            self.sender_msgs[sender] = []\n        \
      \    self.add_sender_slot(sender)\n        self.sender_msgs[sender].append(text)\n\
      \n        if self.current_sender != sender:\n            self.unread.add(sender)\n\
      \            self.update_sender_slot(sender)\n\n        if self.current_sender\
      \ == sender or self.current_sender is None:\n            self.display_sender_messages(sender)\n\
      \n    def add_sender_slot(self, sender):\n        slot_widget = QtWidgets.QWidget()\n\
      \        slot_widget.setFixedHeight(50)\n        slot_widget.setStyleSheet(\"\
      \"\"\n            background-color: #2C3E50;\n            border-radius: 8px;\n\
      \        \"\"\")\n        layout = QtWidgets.QHBoxLayout()\n        layout.setContentsMargins(10,0,10,0)\n\
      \        slot_widget.setLayout(layout)\n\n        name_label = QtWidgets.QLabel(sender)\n\
      \        name_label.setStyleSheet(\"color: white; font-weight: bold;\")\n  \
      \      layout.addWidget(name_label, alignment=QtCore.Qt.AlignLeft)\n\n     \
      \   dot_label = QtWidgets.QLabel(\"\\u25CF\")\n        dot_label.setStyleSheet(\"\
      color: yellow; font-weight: bold;\")\n        dot_label.setVisible(False)\n\
      \        layout.addWidget(dot_label, alignment=QtCore.Qt.AlignRight)\n\n   \
      \     slot_widget.mousePressEvent = lambda e, s=sender: self.display_sender_messages(s)\n\
      \n        self.sender_buttons[sender] = {'widget': slot_widget, 'dot': dot_label,\
      \ 'name': name_label}\n        self.sender_layout.addWidget(slot_widget)\n\n\
      \    def update_sender_slot(self, sender):\n        btn_info = self.sender_buttons.get(sender)\n\
      \        if btn_info:\n            btn_info['dot'].setVisible(sender in self.unread)\n\
      \n    def display_sender_messages(self, sender):\n        self.current_sender\
      \ = sender\n        if sender in self.unread:\n            self.unread.remove(sender)\n\
      \            self.update_sender_slot(sender)\n\n        # Clear chat layout\n\
      \        for i in reversed(range(self.chat_layout.count())):\n            w\
      \ = self.chat_layout.takeAt(i).widget()\n            if w:\n               \
      \ w.deleteLater()\n\n        msgs = self.sender_msgs.get(sender, [])\n     \
      \   for text in msgs:\n            self.add_bubble(text)\n\n        QtCore.QTimer.singleShot(50,\
      \ lambda: self.scroll_area.verticalScrollBar().setValue(\n            self.scroll_area.verticalScrollBar().maximum()\n\
      \        ))\n\n    def add_bubble(self, text):\n        # Chat bubble\n    \
      \    bubble = QtWidgets.QLabel(text)\n        bubble.setWordWrap(True)\n   \
      \     bubble.setStyleSheet(\"\"\"\n            QLabel {\n                background-color:\
      \ #2196F3;\n                color: white;\n                border-radius: 15px;\n\
      \                padding: 20px 30px;\n                font-size: 32px;\n   \
      \         }\n        \"\"\")\n        bubble.setSizePolicy(QtWidgets.QSizePolicy.Expanding,\
      \ QtWidgets.QSizePolicy.Minimum)\n        bubble.setMaximumWidth(500)\n    \
      \    bubble.setMinimumHeight(bubble.sizeHint().height())\n\n        # Shadow\
      \ effect\n        effect = QtWidgets.QGraphicsDropShadowEffect()\n        effect.setBlurRadius(6)\n\
      \        effect.setXOffset(2)\n        effect.setYOffset(2)\n        effect.setColor(QtGui.QColor(0,0,0,100))\n\
      \        bubble.setGraphicsEffect(effect)\n\n        # Timestamp with small\
      \ green \"pill\"\n        timestamp = QtWidgets.QLabel(datetime.now().strftime(\"\
      %H:%M\"))\n        timestamp.setStyleSheet(\"\"\"\n            QLabel {\n  \
      \              background-color: #4CAF50;  /* green background */\n        \
      \        color: white;\n                font-size: 18px;\n                border-radius:\
      \ 8px;\n                padding: 2px 6px;\n            }\n        \"\"\")\n\
      \        timestamp.setAlignment(QtCore.Qt.AlignRight)\n        timestamp.setSizePolicy(QtWidgets.QSizePolicy.Fixed,\
      \ QtWidgets.QSizePolicy.Fixed)  # <-- small pill only\n\n        # Container\
      \ for bubble + timestamp\n        container = QtWidgets.QWidget()\n        layout\
      \ = QtWidgets.QVBoxLayout()\n        layout.setAlignment(QtCore.Qt.AlignLeft)\n\
      \        layout.setContentsMargins(0,0,0,0)\n        layout.addWidget(bubble)\n\
      \        layout.addWidget(timestamp, alignment=QtCore.Qt.AlignRight)  # timestamp\
      \ right-aligned\n        container.setLayout(layout)\n\n        self.chat_layout.addWidget(container,\
      \ alignment=QtCore.Qt.AlignLeft)\n\n# Run GUI for standalone testing\nif __name__\
      \ == \"__main__\":\n    app = QtWidgets.QApplication(sys.argv)\n    gui = multi_sender_gui()\n\
      \    sys.exit(app.app.exec_())\n\n"
    affinity: ''
    alias: ''
    bg_image: '''/home/vboxuser/Downloads/Networks_Telecommunications.jpg'''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Multi-Sender PDU Viewer', 'multi_sender_gui', [('bg_image', "''")],
      [('in', 'message', 1)], [], '\n    Multi-sender PDU GUI with dark bluish-grey
      left panel\n    and Messenger-style scalable chat bubbles with timestamps.\n    ',
      ['bg_image'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [856, 1112.0]
    rotation: 0
    state: enabled
- name: epy_block_4_0
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport pmt\n\
      import zlib\nfrom gnuradio import gr\n\nclass crc_forwarder(gr.basic_block):\n\
      \    \"\"\"\n    CRC32 Checker + Dedup + Forwarder (Message Reassembler)\n \
      \   - Input : [sender_addr | seq_id | payload | crc32]\n    - Output: [sender_addr\
      \ | full_message] only when end marker received\n    - End marker: valid packet\
      \ with empty payload\n    - Handles multiple senders dynamically\n    - ACK\
      \ prepends transmitter's address and appends CRC32\n    \"\"\"\n\n    def __init__(self):\n\
      \        gr.basic_block.__init__(\n            self,\n            name=\"CRC32\
      \ Dedup + Forwarder\",\n            in_sig=[],\n            out_sig=[]\n   \
      \     )\n\n        self.received_ids = set()  # track processed (addr, seq_id)\n\
      \        self.buffers = {}          # per-sender message buffer\n\n        #\
      \ Ports\n        self.message_port_register_in(pmt.intern(\"in\"))\n       \
      \ self.message_port_register_out(pmt.intern(\"out\"))      # forward reassembled\
      \ message\n        self.message_port_register_out(pmt.intern(\"ack_out\")) \
      \ # ACKs\n\n        self.set_msg_handler(pmt.intern(\"in\"), self._handle_msg)\n\
      \n        print(\"[CRC32] Receiver initialized\")\n\n    def _handle_msg(self,\
      \ msg):\n        if not pmt.is_pair(msg):\n            return\n        vec =\
      \ pmt.cdr(msg)\n        if not pmt.is_u8vector(vec):\n            return\n\n\
      \        data = bytearray(pmt.u8vector_elements(vec))\n        if len(data)\
      \ < 6:  # minimum frame length [addr | seq | (opt payload) | crc32]\n      \
      \      print(\"[CRC32] Frame too short\")\n            return\n\n        sender_addr\
      \ = data[0]  # transmitter address\n        pkt_id = data[1]\n        payload\
      \ = data[2:-4]\n        recv_crc = int.from_bytes(data[-4:], \"big\")\n    \
      \    calc_crc = zlib.crc32(bytes([sender_addr, pkt_id]) + payload) & 0xFFFFFFFF\n\
      \n        if calc_crc != recv_crc:\n            print(f\"[CRC32] FAIL (Addr\
      \ 0x{sender_addr:02X}, ID {pkt_id})\")\n            return\n\n        # \u2705\
      \ CRC OK\n        print(f\"[CRC32] OK (Addr 0x{sender_addr:02X}, ID {pkt_id})\"\
      )\n\n        # --- Construct ACK like address_add block, then append CRC32 ---\n\
      \        ack_data = bytearray([sender_addr, 0xAA, pkt_id])\n        ack_crc\
      \ = zlib.crc32(ack_data) & 0xFFFFFFFF\n        ack_data += ack_crc.to_bytes(4,\
      \ 'big')\n\n        ack_vec = pmt.init_u8vector(len(ack_data), list(ack_data))\n\
      \        ack_pdu = pmt.cons(pmt.PMT_NIL, ack_vec)\n        self.message_port_pub(pmt.intern(\"\
      ack_out\"), ack_pdu)\n        print(f\"[ACK] Sent to transmitter Addr 0x{sender_addr:02X},\
      \ ID {pkt_id}, CRC32 0x{ack_crc:08X}\")\n\n        # Deduplication\n       \
      \ if (sender_addr, pkt_id) in self.received_ids:\n            print(f\"[Forward]\
      \ Addr 0x{sender_addr:02X}, ID {pkt_id} duplicate, ignored\")\n            return\n\
      \        self.received_ids.add((sender_addr, pkt_id))\n\n        # Empty payload\
      \ = END marker\n        if len(payload) == 0:\n            if sender_addr in\
      \ self.buffers and self.buffers[sender_addr]:\n                full_payload\
      \ = b''.join(self.buffers[sender_addr])\n                forward_bytes = bytes([sender_addr])\
      \ + full_payload\n                out_vec = pmt.init_u8vector(len(forward_bytes),\
      \ list(forward_bytes))\n                out_msg = pmt.cons(pmt.PMT_NIL, out_vec)\n\
      \                self.message_port_pub(pmt.intern(\"out\"), out_msg)\n     \
      \           print(f\"[Forward] Addr 0x{sender_addr:02X}, END marker \u2192 {len(full_payload)}\
      \ bytes reassembled and forwarded\")\n            else:\n                print(f\"\
      [Forward] Addr 0x{sender_addr:02X}, END marker but no buffered data\")\n   \
      \         self.buffers[sender_addr] = []\n        else:\n            if sender_addr\
      \ not in self.buffers:\n                self.buffers[sender_addr] = []\n   \
      \         self.buffers[sender_addr].append(payload)\n            total_len =\
      \ sum(len(p) for p in self.buffers[sender_addr])\n            print(f\"[Buffer]\
      \ Addr 0x{sender_addr:02X}, ID {pkt_id} \u2192 {len(payload)} bytes buffered\
      \ (total {total_len})\")\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: '(''CRC32 Dedup + Forwarder'', ''crc_forwarder'', [], [(''in'', ''message'',
      1)], [(''ack_out'', ''message'', 1), (''out'', ''message'', 1)], "\n    CRC32
      Checker + Dedup + Forwarder (Message Reassembler)\n    - Input : [sender_addr
      | seq_id | payload | crc32]\n    - Output: [sender_addr | full_message] only
      when end marker received\n    - End marker: valid packet with empty payload\n    -
      Handles multiple senders dynamically\n    - ACK prepends transmitter''s address
      and appends CRC32\n    ", [])'
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [552, 1040.0]
    rotation: 0
    state: enabled
- name: epy_block_5
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport pmt\nfrom\
      \ gnuradio import gr\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util.Padding\
      \ import pad\n\nclass aes_encrypt(gr.basic_block):\n    \"\"\"\n    AES Encryption\
      \ Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed for demo\
      \ (replace with secure exchange in real systems)\n    \"\"\"\n\n    def __init__(self,\
      \ key=b\"1234567890abcdef\", iv=b\"abcdef1234567890\"):\n        gr.basic_block.__init__(\n\
      \            self,\n            name=\"AES Encrypt\",\n            in_sig=[],\n\
      \            out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n        self.key\
      \ = key\n        self.iv = iv\n\n    def handle_msg(self, msg_pmt):\n      \
      \  if pmt.is_pair(msg_pmt):\n            meta = pmt.car(msg_pmt)\n         \
      \   data = bytes(pmt.u8vector_elements(pmt.cdr(msg_pmt)))\n\n            cipher\
      \ = AES.new(self.key, AES.MODE_CBC, self.iv)\n            enc_data = cipher.encrypt(pad(data,\
      \ AES.block_size))\n\n            out_pmt = pmt.cons(meta, pmt.init_u8vector(len(enc_data),\
      \ list(enc_data)))\n            self.message_port_pub(pmt.intern(\"out\"), out_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    iv: b"abcdef1234567890"
    key: b"1234567890abcd30"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES Encrypt', 'aes_encrypt', [('key', "b'1234567890abcdef'"), ('iv',
      "b'abcdef1234567890'")], [('in', 'message', 1)], [('out', 'message', 1)], '\n    AES
      Encryption Block\n    - Encrypts PDUs using AES-128-CBC\n    - Key & IV fixed
      for demo (replace with secure exchange in real systems)\n    ', ['iv', 'key'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [592, 120.0]
    rotation: 0
    state: disabled
- name: epy_block_6
  id: epy_block
  parameters:
    _source_code: "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\nimport pmt\nfrom\
      \ gnuradio import gr\nfrom Cryptodome.Cipher import AES\nfrom Cryptodome.Util.Padding\
      \ import unpad\n\nclass aes_decrypt(gr.basic_block):\n    \"\"\"\n    AES Decryption\
      \ Block\n    - Decrypts PDUs using AES-128-CBC\n    - Must use the same Key\
      \ & IV as the Encrypt block\n    \"\"\"\n\n    def __init__(self, key=b\"1234567890abcdef\"\
      , iv=b\"abcdef1234567890\"):\n        gr.basic_block.__init__(\n           \
      \ self,\n            name=\"AES Decrypt\",\n            in_sig=[],\n       \
      \     out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      in\"))\n        self.message_port_register_out(pmt.intern(\"out\"))\n      \
      \  self.set_msg_handler(pmt.intern(\"in\"), self.handle_msg)\n\n        self.key\
      \ = key\n        self.iv = iv\n\n    def handle_msg(self, msg_pmt):\n      \
      \  if pmt.is_pair(msg_pmt):\n            meta = pmt.car(msg_pmt)\n         \
      \   data = bytes(pmt.u8vector_elements(pmt.cdr(msg_pmt)))\n\n            cipher\
      \ = AES.new(self.key, AES.MODE_CBC, self.iv)\n            dec_data = unpad(cipher.decrypt(data),\
      \ AES.block_size)\n\n            out_pmt = pmt.cons(meta, pmt.init_u8vector(len(dec_data),\
      \ list(dec_data)))\n            self.message_port_pub(pmt.intern(\"out\"), out_pmt)\n"
    affinity: ''
    alias: ''
    comment: ''
    iv: b"abcdef1234567890"
    key: b"1234567890abcd30"
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('AES Decrypt', 'aes_decrypt', [('key', "b'1234567890abcdef'"), ('iv',
      "b'abcdef1234567890'")], [('in', 'message', 1)], [('out', 'message', 1)], '\n    AES
      Decryption Block\n    - Decrypts PDUs using AES-128-CBC\n    - Must use the
      same Key & IV as the Encrypt block\n    ', ['iv', 'key'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [296, 1144.0]
    rotation: 0
    state: disabled
- name: pdu_pdu_to_tagged_stream_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Header
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1160, 144.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1176, 232.0]
    rotation: 0
    state: enabled
- name: pdu_pdu_to_tagged_stream_0_0_0
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Payload
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1232, 1176.0]
    rotation: 0
    state: true
- name: pdu_pdu_to_tagged_stream_0_1
  id: pdu_pdu_to_tagged_stream
  parameters:
    affinity: ''
    alias: ''
    comment: Header
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1272, 1040.0]
    rotation: 0
    state: true
- name: pdu_tagged_stream_to_pdu_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [144, 960.0]
    rotation: 0
    state: enabled
- name: pdu_tagged_stream_to_pdu_0_0
  id: pdu_tagged_stream_to_pdu
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    tag: packet_len
    type: byte
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [344, 432.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 'received@0: 0,0,1,1'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2152, 536.0]
    rotation: 180
    state: enabled
- name: qtgui_const_sink_x_0_0
  id: qtgui_const_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: '"blue"'
    color10: '"red"'
    color2: '"red"'
    color3: '"red"'
    color4: '"red"'
    color5: '"red"'
    color6: '"red"'
    color7: '"red"'
    color8: '"red"'
    color9: '"red"'
    comment: ''
    grid: 'False'
    gui_hint: 'received@0: 0,1,1,1'
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '0'
    marker10: '0'
    marker2: '0'
    marker3: '0'
    marker4: '0'
    marker5: '0'
    marker6: '0'
    marker7: '0'
    marker8: '0'
    marker9: '0'
    name: '""'
    nconnections: '1'
    size: '1024'
    style1: '0'
    style10: '0'
    style2: '0'
    style3: '0'
    style4: '0'
    style5: '0'
    style6: '0'
    style7: '0'
    style8: '0'
    style9: '0'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: complex
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    xmax: '2'
    xmin: '-2'
    ymax: '2'
    ymin: '-2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [2056, 1516.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Frequency Spectrum of Tx
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: TX - Spectrum
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [784, 676.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_0_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '0.05'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: Frequency Spectrum of Tx ACK
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: TX - Spectrum of ACK
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 1652.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RX-SPECTRUM
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1520, 300.0]
    rotation: 0
    state: enabled
- name: qtgui_freq_sink_x_1_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    average: '1.0'
    axislabels: 'True'
    bw: samp_rate
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'False'
    fc: '0'
    fftsize: '256'
    freqhalf: 'True'
    grid: 'False'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: RX-SPECTRUM of ACK
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1328, 1700.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: 'received@1: 0,0,1,1'
    label1: Symbols
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: ''
    nconnections: '1'
    size: '500'
    srate: samp_rate
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '4'
    ymin: '-1'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1568, 996.0]
    rotation: 180
    state: enabled
- name: received
  id: qtgui_tab_widget
  parameters:
    alias: ''
    comment: ''
    gui_hint: 2,0,1,1
    label0: Constellation
    label1: Symbols
    label10: Tab 10
    label11: Tab 11
    label12: Tab 12
    label13: Tab 13
    label14: Tab 14
    label15: Tab 15
    label16: Tab 16
    label17: Tab 17
    label18: Tab 18
    label19: Tab 19
    label2: Tab 2
    label3: Tab 3
    label4: Tab 4
    label5: Tab 5
    label6: Tab 6
    label7: Tab 7
    label8: Tab 8
    label9: Tab 9
    num_tabs: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [3456, 616.0]
    rotation: 0
    state: enabled
- name: soapy_bladerf_sink_0
  id: soapy_bladerf_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 1.2e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: txgain
    samp_rate: samp_rate_blade*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [888, 320.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_sink_0_0
  id: soapy_bladerf_sink
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 1.2e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: txgain
    samp_rate: samp_rate_blade*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [768, 1324.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_source_0
  id: soapy_bladerf_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 2.4e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1200, 364.0]
    rotation: 0
    state: disabled
- name: soapy_bladerf_source_0_0
  id: soapy_bladerf_source
  parameters:
    affinity: ''
    alias: ''
    bandwidth: '10000'
    center_freq: 1.2e9
    comment: ''
    dev_args: ''
    freq_correction: '0'
    gain: '30.0'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate*2
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1120, 1356.0]
    rotation: 0
    state: disabled
- name: virtual_sink_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 872.0]
    rotation: 180
    state: enabled
- name: virtual_sink_0_0
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1712, 200.0]
    rotation: 0
    state: enabled
- name: virtual_sink_1
  id: virtual_sink
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 1856.0]
    rotation: 180
    state: enabled
- name: virtual_source_0
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: channel_tx
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 548.0]
    rotation: 0
    state: enabled
- name: virtual_source_1
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: out
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [0, 1032.0]
    rotation: 0
    state: enabled
- name: virtual_source_2
  id: virtual_source
  parameters:
    alias: ''
    comment: ''
    stream_id: ACK
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [600, 360.0]
    rotation: 180
    state: enabled

connections:
- [blocks_char_to_float_0, '0', qtgui_time_sink_x_0, '0']
- [blocks_multiply_const_vxx_0, '0', soapy_bladerf_sink_0, '0']
- [blocks_multiply_const_vxx_0_0, '0', soapy_bladerf_sink_0_0, '0']
- [blocks_repack_bits_bb_1, '0', virtual_sink_0, '0']
- [blocks_repack_bits_bb_1_0, '0', virtual_sink_1, '0']
- [blocks_tagged_stream_mux_0, '0', virtual_sink_0_0, '0']
- [blocks_tagged_stream_mux_0_0, '0', digital_constellation_modulator_0_0, '0']
- [blocks_throttle2_0, '0', channels_channel_model_0, '0']
- [blocks_throttle2_0_0, '0', channels_channel_model_0_0, '0']
- [blocks_unpack_k_bits_bb_0, '0', digital_correlate_access_code_xx_ts_0, '0']
- [blocks_unpack_k_bits_bb_0_0, '0', digital_correlate_access_code_xx_ts_0_0, '0']
- [channels_channel_model_0, '0', digital_symbol_sync_xx_0, '0']
- [channels_channel_model_0, '0', qtgui_freq_sink_x_1, '0']
- [channels_channel_model_0_0, '0', digital_symbol_sync_xx_0_0, '0']
- [channels_channel_model_0_0, '0', qtgui_freq_sink_x_1_0, '0']
- [digital_constellation_decoder_cb_0, '0', blocks_char_to_float_0, '0']
- [digital_constellation_decoder_cb_0, '0', digital_diff_decoder_bb_0, '0']
- [digital_constellation_decoder_cb_0_0, '0', digital_diff_decoder_bb_0_0, '0']
- [digital_constellation_modulator_0, '0', blocks_multiply_const_vxx_0, '0']
- [digital_constellation_modulator_0, '0', blocks_throttle2_0, '0']
- [digital_constellation_modulator_0, '0', qtgui_freq_sink_x_0, '0']
- [digital_constellation_modulator_0_0, '0', blocks_multiply_const_vxx_0_0, '0']
- [digital_constellation_modulator_0_0, '0', blocks_throttle2_0_0, '0']
- [digital_constellation_modulator_0_0, '0', qtgui_freq_sink_x_0_0, '0']
- [digital_correlate_access_code_xx_ts_0, '0', blocks_repack_bits_bb_1, '0']
- [digital_correlate_access_code_xx_ts_0_0, '0', blocks_repack_bits_bb_1_0, '0']
- [digital_costas_loop_cc_0, '0', digital_constellation_decoder_cb_0, '0']
- [digital_costas_loop_cc_0, '0', qtgui_const_sink_x_0, '0']
- [digital_costas_loop_cc_0_0, '0', digital_constellation_decoder_cb_0_0, '0']
- [digital_costas_loop_cc_0_0, '0', qtgui_const_sink_x_0_0, '0']
- [digital_crc_append_0, out, epy_block_0, in]
- [digital_crc_append_0, out, epy_block_5, in]
- [digital_diff_decoder_bb_0, '0', digital_map_bb_0, '0']
- [digital_diff_decoder_bb_0_0, '0', digital_map_bb_0_0, '0']
- [digital_linear_equalizer_0_0, '0', digital_costas_loop_cc_0, '0']
- [digital_linear_equalizer_0_0_0, '0', digital_costas_loop_cc_0_0, '0']
- [digital_map_bb_0, '0', blocks_unpack_k_bits_bb_0, '0']
- [digital_map_bb_0_0, '0', blocks_unpack_k_bits_bb_0_0, '0']
- [digital_protocol_formatter_async_0, header, pdu_pdu_to_tagged_stream_0, pdus]
- [digital_protocol_formatter_async_0, payload, pdu_pdu_to_tagged_stream_0_0, pdus]
- [digital_protocol_formatter_async_0_0, header, pdu_pdu_to_tagged_stream_0_1, pdus]
- [digital_protocol_formatter_async_0_0, payload, pdu_pdu_to_tagged_stream_0_0_0,
  pdus]
- [digital_symbol_sync_xx_0, '0', digital_linear_equalizer_0_0, '0']
- [digital_symbol_sync_xx_0_0, '0', digital_linear_equalizer_0_0_0, '0']
- [epy_block_0, out, digital_protocol_formatter_async_0, in]
- [epy_block_0_1_0, out, epy_block_2_0, in]
- [epy_block_2_0, feedback, epy_block_0_1_0, feedback]
- [epy_block_2_0, out, digital_crc_append_0, in]
- [epy_block_3, out, epy_block_4_0, in]
- [epy_block_3, out, epy_block_6, in]
- [epy_block_3_0, out, epy_block_2_0, ack_in]
- [epy_block_4_0, ack_out, digital_protocol_formatter_async_0_0, in]
- [epy_block_4_0, out, epy_block_3_1, in]
- [epy_block_5, out, epy_block_0, in]
- [epy_block_6, out, epy_block_4_0, in]
- [pdu_pdu_to_tagged_stream_0, '0', blocks_tagged_stream_mux_0, '0']
- [pdu_pdu_to_tagged_stream_0_0, '0', blocks_tagged_stream_mux_0, '1']
- [pdu_pdu_to_tagged_stream_0_0_0, '0', blocks_tagged_stream_mux_0_0, '1']
- [pdu_pdu_to_tagged_stream_0_1, '0', blocks_tagged_stream_mux_0_0, '0']
- [pdu_tagged_stream_to_pdu_0, pdus, epy_block_3, in]
- [pdu_tagged_stream_to_pdu_0_0, pdus, epy_block_3_0, in]
- [soapy_bladerf_source_0, '0', digital_symbol_sync_xx_0, '0']
- [soapy_bladerf_source_0, '0', qtgui_freq_sink_x_1, '0']
- [soapy_bladerf_source_0_0, '0', digital_symbol_sync_xx_0_0, '0']
- [soapy_bladerf_source_0_0, '0', qtgui_freq_sink_x_1_0, '0']
- [virtual_source_0, '0', digital_constellation_modulator_0, '0']
- [virtual_source_1, '0', pdu_tagged_stream_to_pdu_0, '0']
- [virtual_source_2, '0', pdu_tagged_stream_to_pdu_0_0, '0']

metadata:
  file_format: 1
  grc_version: 3.10.12.0
